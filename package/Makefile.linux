#
# Linux-specific packaging
#

define CP_DEB_FILES_TEMPLATE
.PHONY: $(2)/$(1)
$(2)/$(1): $(3)/$(1) $(DEB_BUILD_DIR)
	$(V1)cp -a $$< $$@
endef

# Update this number for every formal release.  The Deb packaging system relies on this to know to update a
# package or not.  Otherwise, the user has to uninstall first.
VERSION_FULL		:= $(PACKAGE_LBL)-1

FLIGHT_FW		:= coptercontrol sparky sparky2 sparkybgc revomini pipxtreme quanton flyingf3 naze32 aq32

DEB_BUILD_DIR		:= $(BUILD_DIR)/debian

SED_AUTHOR_NAME		= $(shell git config user.name)
SED_AUTHOR_EMAIL	= $(shell git config user.email)
SED_AUTHOR		= $(SED_AUTHOR_NAME) <$(SED_AUTHOR_EMAIL)>
SED_DATE_STRG		= $(shell date -R)
SED_BIN_ROOT		= $(PACKAGE_DIR)/$(GCS_PACKAGE_NAME)
SED_SCRIPT		= s|<VERSION>|$(VERSION_FULL)|;s|<DATE>|$(SED_DATE_STRG)|;s|<AUTHOR>|$(SED_AUTHOR)|;s|<BIN_ROOT>|$(SED_BIN_ROOT)|;s|<PROJECT_ROOT>|$(ROOT_DIR)|;s|<TARGET_ROOT>|$(DEB_BUILD_DIR)|g

DEB_CFG_CMN		:= $(ROOT_DIR)/package/linux/deb_common
DEB_CFG_CMN_FILES	:= $(shell ls $(DEB_CFG_CMN))
DEB_CFG_I386_DIR	:= $(ROOT_DIR)/package/linux/deb_i386
DEB_CFG_I386_FILES	:= $(shell ls $(DEB_CFG_I386_DIR))
DEB_CFG_AMD64_DIR	:= $(ROOT_DIR)/package/linux/deb_amd64
DEB_CFG_AMD64_FILES	:= $(shell ls $(DEB_CFG_AMD64_DIR))
DEB_MACHINE_DIR		:= $(DEB_CFG_AMD64_DIR)
DEB_MACHINE_FILES	:= $(DEB_CFG_AMD64_FILES)
ifneq ($(MACHINE_TYPE), x86_64)
 DEB_MACHINE_DIR	:= $(DEB_CFG_I386_DIR)
 DEB_MACHINE_FILES	:= $(DEB_CFG_I386_FILES)
endif
ALL_DEB_FILES  = $(foreach f, $(DEB_CFG_CMN_FILES), $(DEB_BUILD_DIR)/$(f))
ALL_DEB_FILES += $(foreach f, $(DEB_MACHINE_FILES), $(DEB_BUILD_DIR)/$(f))

QT_PLUGINS_USED		:= imageformats platforms sqldrivers xcbglintegrations

standalone: | gcs
	@echo $@ starting
	@echo Copying Qt5 plugins libraries
	$(V1) mkdir -p "$(BUILD_DIR)/ground/gcs/lib/taulabs/qtplugins"
	$(V1) cp -v -R $(QT_PLUGINS_DIR)/imageformats $(BUILD_DIR)/ground/gcs/lib/taulabs/qtplugins/
	$(V1) cp -v -R $(QT_PLUGINS_DIR)/platforms $(BUILD_DIR)/ground/gcs/lib/taulabs/qtplugins/
	$(V1) mkdir -p "$(BUILD_DIR)/ground/gcs/lib/taulabs/qtplugins/sqldrivers"
	$(V1) cp -v -R $(QT_PLUGINS_DIR)/sqldrivers/libqsqlite.so $(BUILD_DIR)/ground/gcs/lib/taulabs/qtplugins/sqldrivers
	$(V1) cp -v -R $(QT_PLUGINS_DIR)/xcbglintegrations $(BUILD_DIR)/ground/gcs/lib/taulabs/qtplugins/
	$(V1) mkdir -p "$(BUILD_DIR)/ground/gcs/lib/taulabs/qml"
	$(V1) cp -v -R $(QT_PLUGINS_DIR)/../qml/QtQuick.2 $(BUILD_DIR)/ground/gcs/lib/taulabs/qml/
	$(V1) cp -v -R $(QT_PLUGINS_DIR)/../qml/QtQuick $(BUILD_DIR)/ground/gcs/lib/taulabs/qml/
	@echo Copying platform libraries dependencies
	$(V1) find $(QT_PLUGINS_DIR)/platforms/ -name '*.so'	| xargs -I '{}' ldd '{}'| sed -e '/^[^\t]/ d; s/^\t\(.* => \)\?\([^ ]*\) (.*/\2/g' \
	| grep "Qt5" | grep -v "build/ground" | sort | uniq | xargs -I '{}' cp -v -f '{}' $(BUILD_DIR)/ground/gcs/lib/taulabs 
	$(V1)find $(QT_PLUGINS_DIR)/../qml/QtQuick/ -name '*.so'	| xargs -I '{}' ldd '{}'| sed -e '/^[^\t]/ d; s/^\t\(.* => \)\?\([^ ]*\) (.*/\2/g' \
	| grep "Qt5" | grep -v "build/ground" | sort | uniq | xargs -I '{}' cp -v -f '{}' $(BUILD_DIR)/ground/gcs/lib/taulabs 
	@echo Searching and copying used Qt5 libraries
	$(V1) find $(BUILD_DIR)/ground/gcs/bin/taulabsgcs.bin $(BUILD_DIR)/ground/gcs/lib/taulabs/plugins/TauLabs/*.so -exec ldd {} \; \
	| sed -e '/^[^\t]/ d; s/^\t\(.* => \)\?\([^ ]*\) (.*/\2/g'| grep "Qt5" | grep -v "build/ground" | sort | uniq | xargs -I '{}' cp -v -f '{}' $(BUILD_DIR)/ground/gcs/lib/taulabs
	@echo Copying qt.conf file
	$(V1) cp -v $(ROOT_DIR)/package/linux/qt.conf $(BUILD_DIR)/ground/gcs/bin/

ground_package_os_specific: ground_package_common
	$(V1) cp -v $(ROOT_DIR)/package/linux/taulabsgcs $(PACKAGE_DIR)/$(GCS_PACKAGE_NAME)

installer_package: deb_build ground_package
	@echo $@ starting
	$(V1) cd $(BUILD_DIR) && dpkg-buildpackage -b -us -uc
	$(V1) mv $(ROOT_DIR)/$(GCS_PACKAGE_NAME).deb $(PACKAGE_DIR)
	$(V1) mv $(ROOT_DIR)/$(GCS_PACKAGE_NAME).changes $(PACKAGE_DIR)
	$(V1) rm -rf $(DEB_BUILD_DIR)

deb_build: | $(DEB_BUILD_DIR) $(ALL_DEB_FILES)
	@echo $@ starting
	$(V1) find $(DEB_BUILD_DIR) -maxdepth 1 -type f | xargs sed -i -e "$(SED_SCRIPT)"

$(DEB_BUILD_DIR): 
	@echo $@ starting
	$(V1) mkdir -p $(DEB_BUILD_DIR)
$(foreach cpfile, $(DEB_CFG_CMN_FILES), $(eval $(call CP_DEB_FILES_TEMPLATE,$(cpfile),$(DEB_BUILD_DIR),$(DEB_CFG_CMN))))
$(foreach cpfile, $(DEB_MACHINE_FILES), $(eval $(call CP_DEB_FILES_TEMPLATE,$(cpfile),$(DEB_BUILD_DIR),$(DEB_MACHINE_DIR))))

gcs: uavobjects
	@echo "Linux Package Make of GCS."
	$(V1) $(MAKE) -C $(ROOT_DIR) GCS_BUILD_CONF=release $@

.PHONY: gcs ground_package linux_deb_package deb_build $(DEB_BUILD_DIR)

package_ground_compress: package_ground
	$(V1) tar -cvJf $(PACKAGE_DIR)/$(GCS_PACKAGE_NAME).tar.xz -C $(PACKAGE_DIR) $(GCS_PACKAGE_NAME)
package_flight_compress: package_flight
	$(V1) tar -cvJf $(PACKAGE_DIR)/firmware-$(PACKAGE_LBL).tar.xz -C $(FW_DIR) .
package_matlab_compress: package_matlab
	$(V1) tar -cvJf $(PACKAGE_DIR)/matlab-$(PACKAGE_LBL).tar.xz -C $(ML_DIR) .
package_all_compress: package_all
	$(V1) tar -cvJf $(BUILD_DIR)/$(PACKAGE_LBL).tar.xz --exclude='*.tar.xz' -C $(PACKAGE_DIR) .

.PHONY: standalone installer_package deb_build $(DEB_BUILD_DIR) gcs
.PHONY: package_ground_compress package_flight_compress package_matlab_compress
